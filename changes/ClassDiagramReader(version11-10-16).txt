package com.cs151.asciiviolet;

import java.awt.geom.Point2D;
import java.util.ArrayList;
import java.util.Scanner;

import com.horstmann.violet.ClassDiagramGraph;
import com.horstmann.violet.ClassNode;
import com.horstmann.violet.framework.Edge;
import com.horstmann.violet.framework.MultiLineString;

/**
 * A command reader that reads a string and execute it
 * 
 * @author linxiaofan, benny3946
 * @version 11/10/16
 *
 */
public class ClassDiagramReader
{

   /**
    * Construct a ClassDiagramReader with a given graph
    * 
    * @param aGraph
    *           the given graph
    */
   public ClassDiagramReader(ClassDiagramGraph aGraph)
   {

      graph = aGraph;
      nodes = (ArrayList<ClassNode>) graph.getNodes();
   }

   /**
    * Read the input and execute it
    * 
    * @param input
    *           the given input
    */
   public void read(String input)
   {
      Scanner s = new Scanner(input);
      String command = "";

      while (s.hasNext())
      {
         command = s.nextLine();
         int count = 0;

         while (count < command.length())
         {
            // find nodeA
            while (count < command.length() && command.charAt(count) != '[')
            {
               count++;
            }
            String nameA = "";
            count++;

            while (count < command.length() && command.charAt(count) != ']')
            {
               nameA += command.charAt(count);
               count++;
            }
            // find operator
            String operator = "";
            count++;
            while (count < command.length() && command.charAt(count) != '[')
            {
               operator += command.charAt(count);
               count++;
            }
            // find nodeB
            String nameB = "";
            count++;

            while (count < command.length() && command.charAt(count) != ']')
            {
               nameB += command.charAt(count);
               count++;
            }
            // for the case of two nodes.
            if (nameA != "" && nameB != "")
               connect(nameA, nameB, operator);
            // for the case of only one node.
            else if (nameA != "" && nameB == "")
               createClassNode(nameA);
         } // end while
      } // end while

   }

   private void connect(String a, String b, String op)
   {
      ClassNode nodeA = find(a);
      ClassNode nodeB = find(b);

      if (nodeA == null)
      {
         nodeA = new ClassNode();
         MultiLineString string1 = new MultiLineString();
         string1.setText(a);
         nodeA.setName(string1);
         while (!graph.add(nodeA, new Point2D.Double(80 * Math.random(), 80 * Math.random())))
         {
         }

      }

      if (nodeB == null)
      {
         nodeB = new ClassNode();
         MultiLineString string2 = new MultiLineString();
         string2.setText(b);
         nodeB.setName(string2);
         while (!graph.add(nodeB, new Point2D.Double(80 * Math.random(), 80 * Math.random())))
         {
         }
      }

      operate(nodeA, nodeB, op);
   }

   private void createClassNode(String name)
   {
      ClassNode node = find(name);

      if (node == null)
      {
         node = new ClassNode();
         MultiLineString string = new MultiLineString();
         string.setText(name);
         node.setName(string);
         nodes.add(node);
      }
   }

   private void operate(ClassNode a, ClassNode b, String op)
   {
      Edge edge;
      if ("-->".compareTo(op) == 0)
      {
         edge = (Edge) graph.getEdgePrototypes()[0].clone();
         graph.connect(edge, a, b);
      }
      if ("-|>".compareTo(op) == 0)
      {
         edge = (Edge) graph.getEdgePrototypes()[1].clone();
         graph.connect(edge, a, b);
      }
      if ("--|>".compareTo(op) == 0)
      {
         edge = (Edge) graph.getEdgePrototypes()[2].clone();
         graph.connect(edge, a, b);
      }
      if ("->".compareTo(op) == 0)
      {
         edge = (Edge) graph.getEdgePrototypes()[3].clone();
         graph.connect(edge, a, b);
      }
      if ("<>-".compareTo(op) == 0)
      {
         edge = (Edge) graph.getEdgePrototypes()[4].clone();
         graph.connect(edge, a, b);
      }
      if ("<.>-".compareTo(op) == 0)
      {
         edge = (Edge) graph.getEdgePrototypes()[5].clone();
         graph.connect(edge, a, b);
      }
      if ("--".compareTo(op) == 0)
      {
         edge = (Edge) graph.getEdgePrototypes()[6].clone();
         graph.connect(edge, a, b);
      }

   }

   private ClassNode find(String name)
   {
      for (ClassNode node : nodes)
      {
         if (node.getName().getText().equals(name))
         {
            return node;
         }
      }
      return null;
   }

   private ArrayList<ClassNode> nodes;
   private ClassDiagramGraph graph;

}